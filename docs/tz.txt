Задание конфигурации:

1) Разная обработка для разных форматов файлов
2) Опции для дампа (в опции objdump и в настройки препроцессора)
3) Препроцессинг для синтаксической подсветки и кросс ссылок
4) Чтение и обработка вывода от objdump
5) Микс данных от objdump и предварительного запуска objdump при выдаче (ассемблер+релокации)
6) Преобразование выхлопа из objdump в удобочитаемый формат
7) Поск Cross Refs по именам
8) Наследование в описателях форматов
9) Хуки в препроцессоре вывода

Способы препроцессирования:
1) Bulk (все закачали, обработал и выдали результат)
2) По строкам - обрабатываются строка за строкой из выдачи objdump (возможна вставка других строк)
                                                                                                      
Способы задания конфигурации:
1) JS
2) XML как структуры данных для загрузки через JS
3) Задание конфиг данных в виде файлов в директориях и/или zip

Environment
1) Путь до тулов
2) Имена исполняемых файлов
3) PATH/ENV

Навигация
1) Поиск в сгенерированных документах
2) Показ документа в динамическом окне (по результату поиска)
3) Обрезание показываемых данных, выходящих за окно просмотра (?)
4) Поисковые линки (из выдачи objdump'а)
5) Persistent История (дерево с пользовательскими метками)

--------------------------------------------------------------------------------------------------------

object Environment (global, predefined)

getVar('var name')
.logLevel : <N>
.logFile : 'file'
addGlobObj('name',object)
getGlobObj('name')

---------------------------------------


object Executer (global, from config)

.config
 .common = ['$(PATH)','$(EXE_NAME=objdump)']
 .sections = {
   globHeader : '-h ${OPTS=) $(INP_FILE)',
   ...
 }

exec(<section name>,{ vars ... } [, { options ... }]) -> LinesStream
  Options:
   MustSucceed : true


object LinesStream

getLine() -> 'string' (or throw exception StreamError)
getLines() -> {exitCode: <N>, lines: [lines...]}
kill()
getExitCode() -> <N> | null
isEOF() -> false/true

object StreamError

getReason() -> 'EOF' | 'Error'
getExitCode() -> <N> | null

-------------------------------------------------

Autodetect()
-------------------------------------------------

object ViewConfigSet (global, from config)
<view name> => object ViewConfig

object ViewConfig
.config
 .viewTranslatorConfig = {...} // config data for viewTranslator
 .viewTranslator = constructor of object derived from ViewTranslator or one of predefined
 .gui = QML() or null // Optional QML dialog
 .execDriverConfig = {...} // config data for execDriver
 .execDriver = constructor of object derived from ExecDriver or one of predefined


object ViewTranslator (can be specified in config as derived Object)

constructor: (LinesStream, ViewConfig)

getHeader() -> string
getBody() -> LinesStreamEx
getFooter() -> string
getFindCriteria() -> [ 'criteria', ... ]

LinesStreamEx
getLineInfo() -> LineInfo / null

object LineInfo
canSplit() -> true if current line can start new HTML block
getFindToks(<criteria>) -> [ 'tok1', 'tok2', ... ]
getLine() -> string


object ExecDriver (can be specified in config as derived Object)

constructor: (ViewConfig)

getLines() -> LinesStream

config process: TBD
 
